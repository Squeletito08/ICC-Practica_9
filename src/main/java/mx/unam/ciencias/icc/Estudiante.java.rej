--- src/main/java/mx/unam/ciencias/icc/Estudiante.java
+++ src/main/java/mx/unam/ciencias/icc/Estudiante.java
@@ -36,7 +36,10 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
                       int    cuenta,
                       double promedio,
                       int    edad) {
-        // Aquí va su código.
+        this.nombre    = new SimpleStringProperty(nombre);
+        this.cuenta = new SimpleIntegerProperty(cuenta); 
+        this.promedio = new SimpleDoubleProperty(promedio); 
+        this.edad = new SimpleIntegerProperty(edad); 
     }
 
     /**
@@ -44,7 +47,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return el nombre del estudiante.
      */
     public String getNombre() {
-        // Aquí va su código.
+        return nombre.get(); 
     }
 
     /**
@@ -52,7 +55,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @param nombre el nuevo nombre del estudiante.
      */
     public void setNombre(String nombre) {
-        // Aquí va su código.
+        this.nombre.set(nombre); 
     }
 
     /**
@@ -60,7 +63,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return la propiedad del nombre.
      */
     public StringProperty nombreProperty() {
-        // Aquí va su código.
+        return nombre; 
     }
 
     /**
@@ -68,7 +71,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return el número de cuenta del estudiante.
      */
     public int getCuenta() {
-        // Aquí va su código.
+        return cuenta.get(); 
     }
 
     /**
@@ -76,7 +79,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @param cuenta el nuevo número de cuenta del estudiante.
      */
     public void setCuenta(int cuenta) {
-        // Aquí va su código.
+        this.cuenta.set(cuenta); 
     }
 
     /**
@@ -84,7 +87,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return la propiedad del número de cuenta.
      */
     public IntegerProperty cuentaProperty() {
-        // Aquí va su código.
+        return cuenta; 
     }
 
     /**
@@ -92,7 +95,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return el promedio del estudiante.
      */
     public double getPromedio() {
-        // Aquí va su código.
+        return promedio.get(); 
     }
 
     /**
@@ -100,7 +103,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @param promedio el nuevo promedio del estudiante.
      */
     public void setPromedio(double promedio) {
-        // Aquí va su código.
+        this.promedio.set(promedio); 
     }
 
     /**
@@ -108,7 +111,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return la propiedad del promedio.
      */
     public DoubleProperty promedioProperty() {
-        // Aquí va su código.
+        return promedio; 
     }
 
     /**
@@ -116,7 +119,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return la edad del estudiante.
      */
     public int getEdad() {
-        // Aquí va su código.
+        return edad.get(); 
     }
 
     /**
@@ -124,7 +127,7 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @param edad la nueva edad del estudiante.
      */
     public void setEdad(int edad) {
-        // Aquí va su código.
+        this.edad.set(edad); 
     }
 
     /**
@@ -132,15 +135,21 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return la propiedad de la edad.
      */
     public IntegerProperty edadProperty() {
-        // Aquí va su código.
+        return edad; 
     }
 
+
     /**
      * Regresa una representación en cadena del estudiante.
      * @return una representación en cadena del estudiante.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        return String.format(
+            "Nombre   : %s\n" +
+            "Cuenta   : %09d\n" +
+            "Promedio : %2.2f\n" +
+            "Edad     : %d",
+        nombre.get(), cuenta.get(), promedio.get(), edad.get());
     }
 
     /**
@@ -152,8 +161,15 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      *         <code>false</code> en otro caso.
      */
     @Override public boolean equals(Object objeto) {
-        // Aquí va su código.
-    }
+        if (!(objeto instanceof Estudiante))
+            return false;
+        Estudiante estudiante = (Estudiante)objeto;
+
+        return (cuenta.get() == estudiante.cuenta.get() &&
+                promedio.get() == estudiante.promedio.get() &&
+                edad.get() == estudiante.edad.get() &&
+                nombre.get().equals(estudiante.nombre.get()));
+    }   
 
     /**
      * Regresa el estudiante seriado en una línea de texto. La línea de
@@ -162,7 +178,12 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @return la seriación del estudiante en una línea de texto.
      */
     @Override public String seria() {
-        // Aquí va su código.
+        return String.format(
+            "%s\t" +
+            "%d\t" +
+            "%2.2f\t" +
+            "%d\n",
+        nombre.get(), cuenta.get(), promedio.get(), edad.get());
     }
 
     /**
@@ -173,8 +194,31 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @throws ExcepcionLineaInvalida si la línea recibida es nula, vacía o no
      *         es una seriación válida de un estudiante.
      */
-    @Override public void deseria(String linea) {
-        // Aquí va su código.
+    @Override public void deseria(String linea) throws ExcepcionLineaInvalida{
+        
+        if(linea == null)
+            throw new ExcepcionLineaInvalida();
+
+        String s = linea.trim();
+
+        if(s.equals(""))
+            throw new ExcepcionLineaInvalida();
+
+        String[] arreglo = s.split("\t");
+
+        if(arreglo.length != 4)
+            throw new ExcepcionLineaInvalida();
+
+        setNombre(arreglo[0]);
+
+        try{
+            setCuenta(Integer.parseInt(arreglo[1]));
+            setPromedio(Double.parseDouble(arreglo[2]));
+            setEdad(Integer.parseInt(arreglo[3]));
+        }
+        catch(NumberFormatException e){
+            throw new ExcepcionLineaInvalida(); 
+        }
     }
 
     /**
@@ -182,8 +226,15 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @param estudiante el estudiante con el cual actualizar los valores.
      * @throws IllegalArgumentException si el estudiante es <code>null</code>.
      */
-    public void actualiza(Estudiante estudiante) {
-        // Aquí va su código.
+    @Override public void actualiza(Estudiante estudiante) {
+        
+        if(estudiante == null)
+            throw new IllegalArgumentException(); 
+
+        setNombre(estudiante.getNombre()); 
+        setCuenta(estudiante.getCuenta());
+        setEdad(estudiante.getEdad());
+        setPromedio(estudiante.getPromedio());
     }
 
     /**
@@ -212,6 +263,35 @@ public class Estudiante implements Registro<Estudiante, CampoEstudiante> {
      * @throws IllegalArgumentException si el campo es <code>null</code>.
      */
     @Override public boolean casa(CampoEstudiante campo, Object valor) {
-        // Aquí va su código.
+
+        if(campo == null)
+            throw new IllegalArgumentException(); 
+
+        CampoEstudiante cmp = (CampoEstudiante)campo; 
+
+        if(cmp == CampoEstudiante.NOMBRE && valor instanceof String){
+            String aux_string = (String)valor;
+
+            if(aux_string.equals(""))
+                return false; 
+            return (nombre.get().contains(aux_string));
+        }
+
+        if(cmp == CampoEstudiante.CUENTA && valor instanceof Integer){
+            int aux_cuenta = (Integer)valor; 
+            return (aux_cuenta <= cuenta.get());
+        }
+
+        if(cmp == CampoEstudiante.PROMEDIO && valor instanceof Double){
+            double aux_promedio = (Double)valor;
+            return (aux_promedio <= promedio.get());
+        }
+
+        if(cmp == CampoEstudiante.EDAD && valor instanceof Integer){
+            int aux_edad = (Integer)valor;
+            return (aux_edad <= edad.get());
+        }
+
+        return false; 
     }
 }
